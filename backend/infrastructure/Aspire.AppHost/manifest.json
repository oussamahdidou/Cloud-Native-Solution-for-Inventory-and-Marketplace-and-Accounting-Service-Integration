{
  "$schema": "https://json.schemastore.org/aspire-8.0.json",
  "resources": {
    "redis": {
      "type": "container.v0",
      "connectionString": "{redis.bindings.tcp.host}:{redis.bindings.tcp.port}",
      "image": "docker.io/redis:latest",
      "bindings": {
        "tcp": {
          "scheme": "tcp",
          "protocol": "tcp",
          "transport": "tcp",
          "targetPort": 6379
        }
      }
    },
    "sqlserver": {
      "type": "container.v0",
      "connectionString": "Server={sqlserver.bindings.tcp.host},{sqlserver.bindings.tcp.port};User ID=sa;Password={sqlserver-password.value};TrustServerCertificate=true",
      "image": "mcr.microsoft.com/mssql/server:2022-latest",
      "volumes": [
        {
          "name": "microservices_sqlserver_data",
          "target": "/var/opt/mssql",
          "readOnly": false
        }
      ],
      "env": {
        "ACCEPT_EULA": "Y",
        "MSSQL_SA_PASSWORD": "{sqlserver-password.value}",
        "SA_PASSWORD": "Coding@1234?"
      },
      "bindings": {
        "tcp": {
          "scheme": "tcp",
          "protocol": "tcp",
          "transport": "tcp",
          "targetPort": 1433
        }
      }
    },
    "postgresql": {
      "type": "container.v0",
      "connectionString": "Host={postgresql.bindings.tcp.host};Port={postgresql.bindings.tcp.port};Username=postgres;Password={postgresql-password.value}",
      "image": "docker.io/postgres:15",
      "volumes": [
        {
          "name": "microservices_postgres_data",
          "target": "/var/lib/postgresql/data",
          "readOnly": false
        }
      ],
      "env": {
        "POSTGRES_HOST_AUTH_METHOD": "scram-sha-256",
        "POSTGRES_INITDB_ARGS": "--auth-host=scram-sha-256 --auth-local=scram-sha-256",
        "POSTGRES_USER": "stockuser",
        "POSTGRES_PASSWORD": "stockpassword",
        "POSTGRES_DB": "stock"
      },
      "bindings": {
        "tcp": {
          "scheme": "tcp",
          "protocol": "tcp",
          "transport": "tcp",
          "targetPort": 5432
        }
      }
    },
    "rabbitmq": {
      "type": "container.v0",
      "connectionString": "amqp://guest:{rabbitmq-password.value}@{rabbitmq.bindings.tcp.host}:{rabbitmq.bindings.tcp.port}",
      "image": "docker.io/rabbitmq:3-management",
      "env": {
        "RABBITMQ_DEFAULT_USER": "guest",
        "RABBITMQ_DEFAULT_PASS": "guest"
      },
      "bindings": {
        "tcp": {
          "scheme": "tcp",
          "protocol": "tcp",
          "transport": "tcp",
          "targetPort": 5672
        },
        "management": {
          "scheme": "http",
          "protocol": "tcp",
          "transport": "http",
          "targetPort": 15672
        }
      }
    },
    "usersservice": {
      "type": "project.v0",
      "path": "../../services/UsersService/UsersService.csproj",
      "env": {
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory",
        "ASPNETCORE_FORWARDEDHEADERS_ENABLED": "true",
        "HTTP_PORTS": "{usersservice.bindings.http.targetPort}",
        "ConnectionStrings__rabbitmq": "{rabbitmq.connectionString}",
        "ConnectionStrings__sqlserver": "{sqlserver.connectionString}",
        "ConnectionStrings__redis": "{redis.connectionString}"
      },
      "bindings": {
        "http": {
          "scheme": "http",
          "protocol": "tcp",
          "transport": "http"
        },
        "https": {
          "scheme": "https",
          "protocol": "tcp",
          "transport": "http"
        }
      }
    },
    "gateway": {
      "type": "project.v0",
      "path": "../Gateway/Gateway.csproj",
      "env": {
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory",
        "ASPNETCORE_FORWARDEDHEADERS_ENABLED": "true",
        "HTTP_PORTS": "{gateway.bindings.http.targetPort}"
      },
      "bindings": {
        "http": {
          "scheme": "http",
          "protocol": "tcp",
          "transport": "http"
        },
        "https": {
          "scheme": "https",
          "protocol": "tcp",
          "transport": "http"
        }
      }
    },
    "marketplaceservice-api": {
      "type": "project.v0",
      "path": "../../services/MarketplaceService/src/MarketplaceService.API/MarketplaceService.API.csproj",
      "env": {
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES": "true",
        "OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY": "in_memory",
        "ASPNETCORE_FORWARDEDHEADERS_ENABLED": "true",
        "HTTP_PORTS": "{marketplaceservice-api.bindings.http.targetPort}",
        "ConnectionStrings__rabbitmq": "{rabbitmq.connectionString}",
        "ConnectionStrings__sqlserver": "{sqlserver.connectionString}",
        "ConnectionStrings__redis": "{redis.connectionString}"
      },
      "bindings": {
        "http": {
          "scheme": "http",
          "protocol": "tcp",
          "transport": "http"
        },
        "https": {
          "scheme": "https",
          "protocol": "tcp",
          "transport": "http"
        }
      }
    },
    "stockservice": {
      "type": "executable.v0",
      "workingDirectory": "../../services/stockservice",
      "command": "java",
      "args": [
        "-jar",
        "../../services/stockservice/build/libs/stockservice-0.0.1-SNAPSHOT.jar"
      ],
      "env": {
        "JAVA_TOOL_OPTIONS": "-javaagent:../../services/stockservice/agents/opentelemetry-javaagent.jar",
        "SERVER_PORT": "8080",
        "DB_HOST": "127.0.0.1"
      },
      "bindings": {
        "http": {
          "scheme": "http",
          "protocol": "tcp",
          "transport": "http",
          "targetPort": 8080
        }
      }
    },
    "sqlserver-password": {
      "type": "parameter.v0",
      "value": "{sqlserver-password.inputs.value}",
      "inputs": {
        "value": {
          "type": "string",
          "secret": true,
          "default": {
            "generate": {
              "minLength": 22,
              "minLower": 1,
              "minUpper": 1,
              "minNumeric": 1
            }
          }
        }
      }
    }
  }
}